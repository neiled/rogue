!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ANIMATED_SPRITE_H	animated_sprite.h	/^#define ANIMATED_SPRITE_H /;"	d
AnimatedSprite	animated_sprite.cc	/^AnimatedSprite::AnimatedSprite(Graphics* graphics, const std::string& file_path,$/;"	f	class:AnimatedSprite	signature:(Graphics* graphics, const std::string& file_path, int source_x, int source_y, int width, int height, int fps, int num_frames)
AnimatedSprite	animated_sprite.h	/^  AnimatedSprite(Graphics* graphics, const std::string& file_path,$/;"	p	class:AnimatedSprite	access:public	signature:(Graphics* graphics, const std::string& file_path, int source_x, int source_y, int width, int height, int fps, int num_frames)
AnimatedSprite	animated_sprite.h	/^class AnimatedSprite : public Sprite$/;"	c	inherits:Sprite
AnimatedSprite::AnimatedSprite	animated_sprite.cc	/^AnimatedSprite::AnimatedSprite(Graphics* graphics, const std::string& file_path,$/;"	f	class:AnimatedSprite	signature:(Graphics* graphics, const std::string& file_path, int source_x, int source_y, int width, int height, int fps, int num_frames)
AnimatedSprite::AnimatedSprite	animated_sprite.h	/^  AnimatedSprite(Graphics* graphics, const std::string& file_path,$/;"	p	class:AnimatedSprite	access:public	signature:(Graphics* graphics, const std::string& file_path, int source_x, int source_y, int width, int height, int fps, int num_frames)
AnimatedSprite::_current_frame	animated_sprite.h	/^  int _current_frame;$/;"	m	class:AnimatedSprite	access:private
AnimatedSprite::_elapsed_time	animated_sprite.h	/^  int _elapsed_time;$/;"	m	class:AnimatedSprite	access:private
AnimatedSprite::_frame_time	animated_sprite.h	/^  const int _frame_time;$/;"	m	class:AnimatedSprite	access:private
AnimatedSprite::_num_frames	animated_sprite.h	/^  const int _num_frames;$/;"	m	class:AnimatedSprite	access:private
AnimatedSprite::update	animated_sprite.cc	/^void AnimatedSprite::update(int elapsed_time_in_ms)$/;"	f	class:AnimatedSprite	signature:(int elapsed_time_in_ms)
AnimatedSprite::update	animated_sprite.h	/^  void update(int elapsed_time_in_ms);$/;"	p	class:AnimatedSprite	access:public	signature:(int elapsed_time_in_ms)
AnimatedSprite::~AnimatedSprite	animated_sprite.cc	/^AnimatedSprite::~AnimatedSprite()$/;"	f	class:AnimatedSprite	signature:()
AnimatedSprite::~AnimatedSprite	animated_sprite.h	/^  virtual ~AnimatedSprite ();$/;"	p	class:AnimatedSprite	access:public	signature:()
Floor	tile.h	/^    enum class TileType {Wall, Floor, Rock};$/;"	m	class:Tile::TileType	access:private
GAME_H_	game.h	/^#define GAME_H_$/;"	d
GRAPHICS_H_	graphics.h	/^#define GRAPHICS_H_ /;"	d
Game	game.cc	/^Game::Game() {$/;"	f	class:Game	signature:()
Game	game.h	/^  Game();$/;"	p	struct:Game	access:public	signature:()
Game	game.h	/^struct Game {$/;"	s
Game::Game	game.cc	/^Game::Game() {$/;"	f	class:Game	signature:()
Game::Game	game.h	/^  Game();$/;"	p	struct:Game	access:public	signature:()
Game::delay	game.cc	/^void Game::delay(int start_time_ms)$/;"	f	class:Game	signature:(int start_time_ms)
Game::delay	game.h	/^    void delay(int start_time_ms);$/;"	p	struct:Game	access:private	signature:(int start_time_ms)
Game::draw	game.cc	/^void Game::draw(Graphics* graphics, Renderer* renderer, World* world)$/;"	f	class:Game	signature:(Graphics* graphics, Renderer* renderer, World* world)
Game::draw	game.h	/^    void draw(Graphics* graphics, Renderer* renderer, World* world);$/;"	p	struct:Game	access:private	signature:(Graphics* graphics, Renderer* renderer, World* world)
Game::eventLoop	game.cc	/^void Game::eventLoop()$/;"	f	class:Game	signature:()
Game::eventLoop	game.h	/^    void eventLoop();$/;"	p	struct:Game	access:private	signature:()
Game::update	game.cc	/^void Game::update(World* world, Renderer* renderer, int elapsed_time_ms)$/;"	f	class:Game	signature:(World* world, Renderer* renderer, int elapsed_time_ms)
Game::update	game.h	/^    void update(World* world,Renderer* renderer,  int elapsed_time_ms);$/;"	p	struct:Game	access:private	signature:(World* world,Renderer* renderer, int elapsed_time_ms)
Game::~Game	game.cc	/^Game::~Game() {$/;"	f	class:Game	signature:()
Game::~Game	game.h	/^  ~Game();$/;"	p	struct:Game	access:public	signature:()
Graphics	graphics.cc	/^Graphics::Graphics() {$/;"	f	class:Graphics	signature:()
Graphics	graphics.h	/^      Graphics ();$/;"	p	class:Graphics	access:public	signature:()
Graphics	graphics.h	/^class Graphics$/;"	c
Graphics::Graphics	graphics.cc	/^Graphics::Graphics() {$/;"	f	class:Graphics	signature:()
Graphics::Graphics	graphics.h	/^      Graphics ();$/;"	p	class:Graphics	access:public	signature:()
Graphics::Renderer	graphics.h	/^    SDL_Renderer* Renderer;$/;"	m	class:Graphics	access:public
Graphics::_surfaceWindow	graphics.h	/^    SDL_Surface* _surfaceWindow;$/;"	m	class:Graphics	access:private
Graphics::_window	graphics.h	/^    SDL_Window* _window;$/;"	m	class:Graphics	access:private
Graphics::clearScreen	graphics.cc	/^void Graphics::clearScreen()$/;"	f	class:Graphics	signature:()
Graphics::clearScreen	graphics.h	/^    void clearScreen();$/;"	p	class:Graphics	access:public	signature:()
Graphics::loadTexture	graphics.cc	/^SDL_Texture* Graphics::loadTexture( std::string path )$/;"	f	class:Graphics	signature:( std::string path )
Graphics::loadTexture	graphics.h	/^    SDL_Texture* loadTexture( std::string path );$/;"	p	class:Graphics	access:public	signature:( std::string path )
Graphics::render	graphics.cc	/^void Graphics::render()$/;"	f	class:Graphics	signature:()
Graphics::render	graphics.h	/^    void render();$/;"	p	class:Graphics	access:public	signature:()
Graphics::~Graphics	graphics.cc	/^Graphics::~Graphics()$/;"	f	class:Graphics	signature:()
Graphics::~Graphics	graphics.h	/^    virtual ~Graphics ();$/;"	p	class:Graphics	access:public	signature:()
LEVELBUILDER_H_	levelbuilder.h	/^#define LEVELBUILDER_H_$/;"	d
LEVEL_HEIGHT	level.h	/^    const static int LEVEL_HEIGHT = 100;$/;"	m	class:Level	access:public
LEVEL_H_	level.h	/^#define LEVEL_H_$/;"	d
LEVEL_WIDTH	level.h	/^    const static int LEVEL_WIDTH = 100;$/;"	m	class:Level	access:public
Level	level.cc	/^Level::Level()$/;"	f	class:Level	signature:()
Level	level.h	/^    Level ();$/;"	p	class:Level	access:public	signature:()
Level	level.h	/^class Level$/;"	c
Level::LEVEL_HEIGHT	level.h	/^    const static int LEVEL_HEIGHT = 100;$/;"	m	class:Level	access:public
Level::LEVEL_WIDTH	level.h	/^    const static int LEVEL_WIDTH = 100;$/;"	m	class:Level	access:public
Level::Level	level.cc	/^Level::Level()$/;"	f	class:Level	signature:()
Level::Level	level.h	/^    Level ();$/;"	p	class:Level	access:public	signature:()
Level::_map	level.h	/^    array<array<Tile*, LEVEL_WIDTH>, LEVEL_HEIGHT > _map;$/;"	m	class:Level	access:private
Level::getTile	level.cc	/^Tile* Level::getTile(int x, int y)$/;"	f	class:Level	signature:(int x, int y)
Level::getTile	level.h	/^    Tile* getTile(int x, int y);$/;"	p	class:Level	access:public	signature:(int x, int y)
Level::setType	level.cc	/^void Level::setType(int x, int y, Tile::TileType tileType)$/;"	f	class:Level	signature:(int x, int y, Tile::TileType tileType)
Level::setType	level.h	/^    void setType(int x, int y, Tile::TileType tileType);$/;"	p	class:Level	access:public	signature:(int x, int y, Tile::TileType tileType)
Level::~Level	level.cc	/^Level::~Level()$/;"	f	class:Level	signature:()
Level::~Level	level.h	/^    virtual ~Level ();$/;"	p	class:Level	access:public	signature:()
LevelBuilder	levelbuilder.cc	/^LevelBuilder::LevelBuilder()$/;"	f	class:LevelBuilder	signature:()
LevelBuilder	levelbuilder.h	/^    LevelBuilder ();$/;"	p	class:LevelBuilder	access:public	signature:()
LevelBuilder	levelbuilder.h	/^class LevelBuilder$/;"	c
LevelBuilder::LevelBuilder	levelbuilder.cc	/^LevelBuilder::LevelBuilder()$/;"	f	class:LevelBuilder	signature:()
LevelBuilder::LevelBuilder	levelbuilder.h	/^    LevelBuilder ();$/;"	p	class:LevelBuilder	access:public	signature:()
LevelBuilder::buildLevel	levelbuilder.cc	/^void LevelBuilder::buildLevel(Level* level)$/;"	f	class:LevelBuilder	signature:(Level* level)
LevelBuilder::buildLevel	levelbuilder.h	/^    void buildLevel(Level* level);$/;"	p	class:LevelBuilder	access:public	signature:(Level* level)
LevelBuilder::~LevelBuilder	levelbuilder.cc	/^LevelBuilder::~LevelBuilder()$/;"	f	class:LevelBuilder	signature:()
LevelBuilder::~LevelBuilder	levelbuilder.h	/^    virtual ~LevelBuilder ();$/;"	p	class:LevelBuilder	access:public	signature:()
PLAYER_H_	player.h	/^#define PLAYER_H_$/;"	d
Player	player.cc	/^Player::Player()$/;"	f	class:Player	signature:()
Player	player.h	/^    Player();$/;"	p	class:Player	access:public	signature:()
Player	player.h	/^class Player$/;"	c
Player::Player	player.cc	/^Player::Player()$/;"	f	class:Player	signature:()
Player::Player	player.h	/^    Player();$/;"	p	class:Player	access:public	signature:()
Player::_currentTile	player.h	/^    Tile* _currentTile;$/;"	m	class:Player	access:private
Player::attemptMove	player.cc	/^void Player::attemptMove(int newX, int newY)$/;"	f	class:Player	signature:(int newX, int newY)
Player::attemptMove	player.h	/^    void attemptMove(int newX, int newY);$/;"	p	class:Player	access:private	signature:(int newX, int newY)
Player::checkCanMove	player.cc	/^Tile* Player::checkCanMove(int newX, int newY)$/;"	f	class:Player	signature:(int newX, int newY)
Player::checkCanMove	player.h	/^    Tile* checkCanMove(int newX, int newY);$/;"	p	class:Player	access:private	signature:(int newX, int newY)
Player::getCurrentLevel	player.cc	/^Level* Player::getCurrentLevel()$/;"	f	class:Player	signature:()
Player::getCurrentLevel	player.h	/^    Level* getCurrentLevel();$/;"	p	class:Player	access:public	signature:()
Player::getCurrentTile	player.cc	/^Tile* Player::getCurrentTile()$/;"	f	class:Player	signature:()
Player::getCurrentTile	player.h	/^    Tile* getCurrentTile();$/;"	p	class:Player	access:public	signature:()
Player::moveDown	player.cc	/^void Player::moveDown()$/;"	f	class:Player	signature:()
Player::moveDown	player.h	/^    void moveDown();$/;"	p	class:Player	access:public	signature:()
Player::moveLeft	player.cc	/^void Player::moveLeft()$/;"	f	class:Player	signature:()
Player::moveLeft	player.h	/^    void moveLeft();$/;"	p	class:Player	access:public	signature:()
Player::moveRight	player.cc	/^void Player::moveRight()$/;"	f	class:Player	signature:()
Player::moveRight	player.h	/^    void moveRight();$/;"	p	class:Player	access:public	signature:()
Player::moveUp	player.cc	/^void Player::moveUp()$/;"	f	class:Player	signature:()
Player::moveUp	player.h	/^    void moveUp();$/;"	p	class:Player	access:public	signature:()
Player::setCurrentTile	player.cc	/^void Player::setCurrentTile(Tile* currentTile)$/;"	f	class:Player	signature:(Tile* currentTile)
Player::setCurrentTile	player.h	/^    void setCurrentTile(Tile* currentTile);$/;"	p	class:Player	access:public	signature:(Tile* currentTile)
Player::~Player	player.cc	/^Player::~Player()$/;"	f	class:Player	signature:()
Player::~Player	player.h	/^    virtual ~Player();$/;"	p	class:Player	access:public	signature:()
RENDERER_H_	renderer.h	/^#define RENDERER_H_$/;"	d
Renderer	graphics.h	/^    SDL_Renderer* Renderer;$/;"	m	class:Graphics	access:public
Renderer	renderer.cc	/^Renderer::Renderer(Graphics* graphics)$/;"	f	class:Renderer	signature:(Graphics* graphics)
Renderer	renderer.h	/^    Renderer(Graphics* graphics);$/;"	p	class:Renderer	access:public	signature:(Graphics* graphics)
Renderer	renderer.h	/^class Renderer {$/;"	c
Renderer::Renderer	renderer.cc	/^Renderer::Renderer(Graphics* graphics)$/;"	f	class:Renderer	signature:(Graphics* graphics)
Renderer::Renderer	renderer.h	/^    Renderer(Graphics* graphics);$/;"	p	class:Renderer	access:public	signature:(Graphics* graphics)
Renderer::TILE_HEIGHT	renderer.h	/^    const static int TILE_HEIGHT = 32;$/;"	m	class:Renderer	access:public
Renderer::TILE_WIDTH	renderer.h	/^    const static int TILE_WIDTH = 32;$/;"	m	class:Renderer	access:public
Renderer::_graphics	renderer.h	/^    Graphics* _graphics;$/;"	m	class:Renderer	access:private
Renderer::_mapTiles	renderer.h	/^    vector<Sprite*> _mapTiles;$/;"	m	class:Renderer	access:private
Renderer::_player	renderer.h	/^    Sprite* _player;$/;"	m	class:Renderer	access:private
Renderer::render	renderer.cc	/^void Renderer::render(Level* level)$/;"	f	class:Renderer	signature:(Level* level)
Renderer::render	renderer.cc	/^void Renderer::render(Player* player)$/;"	f	class:Renderer	signature:(Player* player)
Renderer::render	renderer.h	/^    void render(Level* level);$/;"	p	class:Renderer	access:public	signature:(Level* level)
Renderer::render	renderer.h	/^    void render(Player* player);$/;"	p	class:Renderer	access:public	signature:(Player* player)
Renderer::update	renderer.cc	/^void Renderer::update(int elapsed_time_in_ms)$/;"	f	class:Renderer	signature:(int elapsed_time_in_ms)
Renderer::update	renderer.h	/^    void update(int elapsed_time_in_ms);$/;"	p	class:Renderer	access:public	signature:(int elapsed_time_in_ms)
Renderer::~Renderer	renderer.cc	/^Renderer::~Renderer()$/;"	f	class:Renderer	signature:()
Renderer::~Renderer	renderer.h	/^    ~Renderer();$/;"	p	class:Renderer	access:public	signature:()
SPRITE_H_	sprite.h	/^#define SPRITE_H_ /;"	d
Sprite	sprite.cc	/^Sprite::Sprite(Graphics* graphics, const std::string& file_path, int source_x, int source_y, int width, int height)$/;"	f	class:Sprite	signature:(Graphics* graphics, const std::string& file_path, int source_x, int source_y, int width, int height)
Sprite	sprite.h	/^  Sprite(Graphics* graphics, const std::string& file_path, int source_x, int source_y, int width, int height);$/;"	p	class:Sprite	access:public	signature:(Graphics* graphics, const std::string& file_path, int source_x, int source_y, int width, int height)
Sprite	sprite.h	/^class Sprite$/;"	c
Sprite::Sprite	sprite.cc	/^Sprite::Sprite(Graphics* graphics, const std::string& file_path, int source_x, int source_y, int width, int height)$/;"	f	class:Sprite	signature:(Graphics* graphics, const std::string& file_path, int source_x, int source_y, int width, int height)
Sprite::Sprite	sprite.h	/^  Sprite(Graphics* graphics, const std::string& file_path, int source_x, int source_y, int width, int height);$/;"	p	class:Sprite	access:public	signature:(Graphics* graphics, const std::string& file_path, int source_x, int source_y, int width, int height)
Sprite::_graphics	sprite.h	/^    Graphics* _graphics;$/;"	m	class:Sprite	access:private
Sprite::_source_rect	sprite.h	/^    SDL_Rect _source_rect;$/;"	m	class:Sprite	access:protected
Sprite::_texture	sprite.h	/^    SDL_Texture* _texture;$/;"	m	class:Sprite	access:private
Sprite::draw	sprite.cc	/^void Sprite::draw(int x, int y)$/;"	f	class:Sprite	signature:(int x, int y)
Sprite::draw	sprite.h	/^  void draw(int x, int y);$/;"	p	class:Sprite	access:public	signature:(int x, int y)
Sprite::update	sprite.h	/^  virtual void update(int elapsed_time_in_ms) {}$/;"	f	class:Sprite	access:public	signature:(int elapsed_time_in_ms)
Sprite::~Sprite	sprite.cc	/^Sprite::~Sprite()$/;"	f	class:Sprite	signature:()
Sprite::~Sprite	sprite.h	/^  virtual ~Sprite();$/;"	p	class:Sprite	access:public	signature:()
TILE_HEIGHT	renderer.h	/^    const static int TILE_HEIGHT = 32;$/;"	m	class:Renderer	access:public
TILE_H_	tile.h	/^#define TILE_H_$/;"	d
TILE_WIDTH	renderer.h	/^    const static int TILE_WIDTH = 32;$/;"	m	class:Renderer	access:public
Tile	tile.cc	/^Tile::Tile()$/;"	f	class:Tile	signature:()
Tile	tile.cc	/^Tile::Tile(TileType tileType, Level* level, int x, int y)$/;"	f	class:Tile	signature:(TileType tileType, Level* level, int x, int y)
Tile	tile.h	/^    Tile (TileType tileType, Level* level, int x, int y);$/;"	p	class:Tile	access:public	signature:(TileType tileType, Level* level, int x, int y)
Tile	tile.h	/^    Tile();$/;"	p	class:Tile	access:public	signature:()
Tile	tile.h	/^class Tile$/;"	c
Tile::Tile	tile.cc	/^Tile::Tile()$/;"	f	class:Tile	signature:()
Tile::Tile	tile.cc	/^Tile::Tile(TileType tileType, Level* level, int x, int y)$/;"	f	class:Tile	signature:(TileType tileType, Level* level, int x, int y)
Tile::Tile	tile.h	/^    Tile (TileType tileType, Level* level, int x, int y);$/;"	p	class:Tile	access:public	signature:(TileType tileType, Level* level, int x, int y)
Tile::Tile	tile.h	/^    Tile();$/;"	p	class:Tile	access:public	signature:()
Tile::TileType	tile.h	/^    enum class TileType {Wall, Floor, Rock};$/;"	c	class:Tile	access:public
Tile::TileType::Floor	tile.h	/^    enum class TileType {Wall, Floor, Rock};$/;"	m	class:Tile::TileType	access:private
Tile::TileType::Wall	tile.h	/^    enum class TileType {Wall, Floor, Rock};$/;"	m	class:Tile::TileType	access:private
Tile::_level	tile.h	/^    Level* _level;$/;"	m	class:Tile	access:private
Tile::_tileType	tile.h	/^    TileType _tileType;$/;"	m	class:Tile	access:private
Tile::_x	tile.h	/^    int _x;$/;"	m	class:Tile	access:private
Tile::_y	tile.h	/^    int _y;$/;"	m	class:Tile	access:private
Tile::getLevel	tile.cc	/^Level* Tile::getLevel()$/;"	f	class:Tile	signature:()
Tile::getLevel	tile.h	/^    Level* getLevel();$/;"	p	class:Tile	access:public	signature:()
Tile::getTileType	tile.cc	/^Tile::TileType Tile::getTileType()$/;"	f	class:Tile	signature:()
Tile::getTileType	tile.h	/^    TileType getTileType();$/;"	p	class:Tile	access:public	signature:()
Tile::getX	tile.cc	/^int Tile::getX()$/;"	f	class:Tile	signature:()
Tile::getX	tile.h	/^    int getX();$/;"	p	class:Tile	access:public	signature:()
Tile::getY	tile.cc	/^int Tile::getY()$/;"	f	class:Tile	signature:()
Tile::getY	tile.h	/^    int getY();$/;"	p	class:Tile	access:public	signature:()
Tile::setTileType	tile.cc	/^void Tile::setTileType(TileType tileType)$/;"	f	class:Tile	signature:(TileType tileType)
Tile::setTileType	tile.h	/^    void setTileType(TileType tileType);$/;"	p	class:Tile	access:public	signature:(TileType tileType)
Tile::~Tile	tile.cc	/^Tile::~Tile()$/;"	f	class:Tile	signature:()
Tile::~Tile	tile.h	/^    virtual ~Tile ();$/;"	p	class:Tile	access:public	signature:()
TileType	tile.h	/^    enum class TileType {Wall, Floor, Rock};$/;"	c	class:Tile	access:public
WORLD_H_	world.h	/^#define WORLD_H_$/;"	d
Wall	tile.h	/^    enum class TileType {Wall, Floor, Rock};$/;"	m	class:Tile::TileType	access:private
World	world.cc	/^World::World()$/;"	f	class:World	signature:()
World	world.h	/^  World ();$/;"	p	class:World	access:public	signature:()
World	world.h	/^class World$/;"	c
World::World	world.cc	/^World::World()$/;"	f	class:World	signature:()
World::World	world.h	/^  World ();$/;"	p	class:World	access:public	signature:()
World::_player	world.h	/^  Player* _player;$/;"	m	class:World	access:private
World::getCurrentLevel	world.cc	/^Level* World::getCurrentLevel()$/;"	f	class:World	signature:()
World::getCurrentLevel	world.h	/^  Level* getCurrentLevel();$/;"	p	class:World	access:public	signature:()
World::getPlayer	world.cc	/^Player* World::getPlayer()$/;"	f	class:World	signature:()
World::getPlayer	world.h	/^  Player* getPlayer();$/;"	p	class:World	access:public	signature:()
World::update	world.cc	/^void World::update()$/;"	f	class:World	signature:()
World::update	world.h	/^  void update();$/;"	p	class:World	access:public	signature:()
World::~World	world.cc	/^World::~World()$/;"	f	class:World	signature:()
World::~World	world.h	/^  virtual ~World ();$/;"	p	class:World	access:public	signature:()
_currentTile	player.h	/^    Tile* _currentTile;$/;"	m	class:Player	access:private
_current_frame	animated_sprite.h	/^  int _current_frame;$/;"	m	class:AnimatedSprite	access:private
_elapsed_time	animated_sprite.h	/^  int _elapsed_time;$/;"	m	class:AnimatedSprite	access:private
_frame_time	animated_sprite.h	/^  const int _frame_time;$/;"	m	class:AnimatedSprite	access:private
_graphics	renderer.h	/^    Graphics* _graphics;$/;"	m	class:Renderer	access:private
_graphics	sprite.h	/^    Graphics* _graphics;$/;"	m	class:Sprite	access:private
_level	tile.h	/^    Level* _level;$/;"	m	class:Tile	access:private
_map	level.h	/^    array<array<Tile*, LEVEL_WIDTH>, LEVEL_HEIGHT > _map;$/;"	m	class:Level	access:private
_mapTiles	renderer.h	/^    vector<Sprite*> _mapTiles;$/;"	m	class:Renderer	access:private
_num_frames	animated_sprite.h	/^  const int _num_frames;$/;"	m	class:AnimatedSprite	access:private
_player	renderer.h	/^    Sprite* _player;$/;"	m	class:Renderer	access:private
_player	world.h	/^  Player* _player;$/;"	m	class:World	access:private
_source_rect	sprite.h	/^    SDL_Rect _source_rect;$/;"	m	class:Sprite	access:protected
_surfaceWindow	graphics.h	/^    SDL_Surface* _surfaceWindow;$/;"	m	class:Graphics	access:private
_texture	sprite.h	/^    SDL_Texture* _texture;$/;"	m	class:Sprite	access:private
_tileType	tile.h	/^    TileType _tileType;$/;"	m	class:Tile	access:private
_window	graphics.h	/^    SDL_Window* _window;$/;"	m	class:Graphics	access:private
_x	tile.h	/^    int _x;$/;"	m	class:Tile	access:private
_y	tile.h	/^    int _y;$/;"	m	class:Tile	access:private
attemptMove	player.cc	/^void Player::attemptMove(int newX, int newY)$/;"	f	class:Player	signature:(int newX, int newY)
attemptMove	player.h	/^    void attemptMove(int newX, int newY);$/;"	p	class:Player	access:private	signature:(int newX, int newY)
buildLevel	levelbuilder.cc	/^void LevelBuilder::buildLevel(Level* level)$/;"	f	class:LevelBuilder	signature:(Level* level)
buildLevel	levelbuilder.h	/^    void buildLevel(Level* level);$/;"	p	class:LevelBuilder	access:public	signature:(Level* level)
checkCanMove	player.cc	/^Tile* Player::checkCanMove(int newX, int newY)$/;"	f	class:Player	signature:(int newX, int newY)
checkCanMove	player.h	/^    Tile* checkCanMove(int newX, int newY);$/;"	p	class:Player	access:private	signature:(int newX, int newY)
clearScreen	graphics.cc	/^void Graphics::clearScreen()$/;"	f	class:Graphics	signature:()
clearScreen	graphics.h	/^    void clearScreen();$/;"	p	class:Graphics	access:public	signature:()
delay	game.cc	/^void Game::delay(int start_time_ms)$/;"	f	class:Game	signature:(int start_time_ms)
delay	game.h	/^    void delay(int start_time_ms);$/;"	p	struct:Game	access:private	signature:(int start_time_ms)
draw	game.cc	/^void Game::draw(Graphics* graphics, Renderer* renderer, World* world)$/;"	f	class:Game	signature:(Graphics* graphics, Renderer* renderer, World* world)
draw	game.h	/^    void draw(Graphics* graphics, Renderer* renderer, World* world);$/;"	p	struct:Game	access:private	signature:(Graphics* graphics, Renderer* renderer, World* world)
draw	sprite.cc	/^void Sprite::draw(int x, int y)$/;"	f	class:Sprite	signature:(int x, int y)
draw	sprite.h	/^  void draw(int x, int y);$/;"	p	class:Sprite	access:public	signature:(int x, int y)
eventLoop	game.cc	/^void Game::eventLoop()$/;"	f	class:Game	signature:()
eventLoop	game.h	/^    void eventLoop();$/;"	p	struct:Game	access:private	signature:()
getCurrentLevel	player.cc	/^Level* Player::getCurrentLevel()$/;"	f	class:Player	signature:()
getCurrentLevel	player.h	/^    Level* getCurrentLevel();$/;"	p	class:Player	access:public	signature:()
getCurrentLevel	world.cc	/^Level* World::getCurrentLevel()$/;"	f	class:World	signature:()
getCurrentLevel	world.h	/^  Level* getCurrentLevel();$/;"	p	class:World	access:public	signature:()
getCurrentTile	player.cc	/^Tile* Player::getCurrentTile()$/;"	f	class:Player	signature:()
getCurrentTile	player.h	/^    Tile* getCurrentTile();$/;"	p	class:Player	access:public	signature:()
getLevel	tile.cc	/^Level* Tile::getLevel()$/;"	f	class:Tile	signature:()
getLevel	tile.h	/^    Level* getLevel();$/;"	p	class:Tile	access:public	signature:()
getPlayer	world.cc	/^Player* World::getPlayer()$/;"	f	class:World	signature:()
getPlayer	world.h	/^  Player* getPlayer();$/;"	p	class:World	access:public	signature:()
getTile	level.cc	/^Tile* Level::getTile(int x, int y)$/;"	f	class:Level	signature:(int x, int y)
getTile	level.h	/^    Tile* getTile(int x, int y);$/;"	p	class:Level	access:public	signature:(int x, int y)
getTileType	tile.cc	/^Tile::TileType Tile::getTileType()$/;"	f	class:Tile	signature:()
getTileType	tile.h	/^    TileType getTileType();$/;"	p	class:Tile	access:public	signature:()
getX	tile.cc	/^int Tile::getX()$/;"	f	class:Tile	signature:()
getX	tile.h	/^    int getX();$/;"	p	class:Tile	access:public	signature:()
getY	tile.cc	/^int Tile::getY()$/;"	f	class:Tile	signature:()
getY	tile.h	/^    int getY();$/;"	p	class:Tile	access:public	signature:()
loadTexture	graphics.cc	/^SDL_Texture* Graphics::loadTexture( std::string path )$/;"	f	class:Graphics	signature:( std::string path )
loadTexture	graphics.h	/^    SDL_Texture* loadTexture( std::string path );$/;"	p	class:Graphics	access:public	signature:( std::string path )
main	main.cc	/^int main (int, char**) {$/;"	f	signature:(int, char**)
moveDown	player.cc	/^void Player::moveDown()$/;"	f	class:Player	signature:()
moveDown	player.h	/^    void moveDown();$/;"	p	class:Player	access:public	signature:()
moveLeft	player.cc	/^void Player::moveLeft()$/;"	f	class:Player	signature:()
moveLeft	player.h	/^    void moveLeft();$/;"	p	class:Player	access:public	signature:()
moveRight	player.cc	/^void Player::moveRight()$/;"	f	class:Player	signature:()
moveRight	player.h	/^    void moveRight();$/;"	p	class:Player	access:public	signature:()
moveUp	player.cc	/^void Player::moveUp()$/;"	f	class:Player	signature:()
moveUp	player.h	/^    void moveUp();$/;"	p	class:Player	access:public	signature:()
render	graphics.cc	/^void Graphics::render()$/;"	f	class:Graphics	signature:()
render	graphics.h	/^    void render();$/;"	p	class:Graphics	access:public	signature:()
render	renderer.cc	/^void Renderer::render(Level* level)$/;"	f	class:Renderer	signature:(Level* level)
render	renderer.cc	/^void Renderer::render(Player* player)$/;"	f	class:Renderer	signature:(Player* player)
render	renderer.h	/^    void render(Level* level);$/;"	p	class:Renderer	access:public	signature:(Level* level)
render	renderer.h	/^    void render(Player* player);$/;"	p	class:Renderer	access:public	signature:(Player* player)
setCurrentTile	player.cc	/^void Player::setCurrentTile(Tile* currentTile)$/;"	f	class:Player	signature:(Tile* currentTile)
setCurrentTile	player.h	/^    void setCurrentTile(Tile* currentTile);$/;"	p	class:Player	access:public	signature:(Tile* currentTile)
setTileType	tile.cc	/^void Tile::setTileType(TileType tileType)$/;"	f	class:Tile	signature:(TileType tileType)
setTileType	tile.h	/^    void setTileType(TileType tileType);$/;"	p	class:Tile	access:public	signature:(TileType tileType)
setType	level.cc	/^void Level::setType(int x, int y, Tile::TileType tileType)$/;"	f	class:Level	signature:(int x, int y, Tile::TileType tileType)
setType	level.h	/^    void setType(int x, int y, Tile::TileType tileType);$/;"	p	class:Level	access:public	signature:(int x, int y, Tile::TileType tileType)
update	animated_sprite.cc	/^void AnimatedSprite::update(int elapsed_time_in_ms)$/;"	f	class:AnimatedSprite	signature:(int elapsed_time_in_ms)
update	animated_sprite.h	/^  void update(int elapsed_time_in_ms);$/;"	p	class:AnimatedSprite	access:public	signature:(int elapsed_time_in_ms)
update	game.cc	/^void Game::update(World* world, Renderer* renderer, int elapsed_time_ms)$/;"	f	class:Game	signature:(World* world, Renderer* renderer, int elapsed_time_ms)
update	game.h	/^    void update(World* world,Renderer* renderer,  int elapsed_time_ms);$/;"	p	struct:Game	access:private	signature:(World* world,Renderer* renderer, int elapsed_time_ms)
update	renderer.cc	/^void Renderer::update(int elapsed_time_in_ms)$/;"	f	class:Renderer	signature:(int elapsed_time_in_ms)
update	renderer.h	/^    void update(int elapsed_time_in_ms);$/;"	p	class:Renderer	access:public	signature:(int elapsed_time_in_ms)
update	sprite.h	/^  virtual void update(int elapsed_time_in_ms) {}$/;"	f	class:Sprite	access:public	signature:(int elapsed_time_in_ms)
update	world.cc	/^void World::update()$/;"	f	class:World	signature:()
update	world.h	/^  void update();$/;"	p	class:World	access:public	signature:()
~AnimatedSprite	animated_sprite.cc	/^AnimatedSprite::~AnimatedSprite()$/;"	f	class:AnimatedSprite	signature:()
~AnimatedSprite	animated_sprite.h	/^  virtual ~AnimatedSprite ();$/;"	p	class:AnimatedSprite	access:public	signature:()
~Game	game.cc	/^Game::~Game() {$/;"	f	class:Game	signature:()
~Game	game.h	/^  ~Game();$/;"	p	struct:Game	access:public	signature:()
~Graphics	graphics.cc	/^Graphics::~Graphics()$/;"	f	class:Graphics	signature:()
~Graphics	graphics.h	/^    virtual ~Graphics ();$/;"	p	class:Graphics	access:public	signature:()
~Level	level.cc	/^Level::~Level()$/;"	f	class:Level	signature:()
~Level	level.h	/^    virtual ~Level ();$/;"	p	class:Level	access:public	signature:()
~LevelBuilder	levelbuilder.cc	/^LevelBuilder::~LevelBuilder()$/;"	f	class:LevelBuilder	signature:()
~LevelBuilder	levelbuilder.h	/^    virtual ~LevelBuilder ();$/;"	p	class:LevelBuilder	access:public	signature:()
~Player	player.cc	/^Player::~Player()$/;"	f	class:Player	signature:()
~Player	player.h	/^    virtual ~Player();$/;"	p	class:Player	access:public	signature:()
~Renderer	renderer.cc	/^Renderer::~Renderer()$/;"	f	class:Renderer	signature:()
~Renderer	renderer.h	/^    ~Renderer();$/;"	p	class:Renderer	access:public	signature:()
~Sprite	sprite.cc	/^Sprite::~Sprite()$/;"	f	class:Sprite	signature:()
~Sprite	sprite.h	/^  virtual ~Sprite();$/;"	p	class:Sprite	access:public	signature:()
~Tile	tile.cc	/^Tile::~Tile()$/;"	f	class:Tile	signature:()
~Tile	tile.h	/^    virtual ~Tile ();$/;"	p	class:Tile	access:public	signature:()
~World	world.cc	/^World::~World()$/;"	f	class:World	signature:()
~World	world.h	/^  virtual ~World ();$/;"	p	class:World	access:public	signature:()
